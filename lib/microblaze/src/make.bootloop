########################################################################
#
# Copyright (c) 2003 - 2010 Xilinx, Inc.  All rights reserved.
#
# Xilinx, Inc.
# XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" AS A 
# COURTESY TO YOU.  BY PROVIDING THIS DESIGN, CODE, OR INFORMATION AS
# ONE POSSIBLE   IMPLEMENTATION OF THIS FEATURE, APPLICATION OR 
# STANDARD, XILINX IS MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION
# IS FREE FROM ANY CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE 
# FOR OBTAINING ANY RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.  
# XILINX EXPRESSLY DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO 
# THE ADEQUACY OF THE IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO 
# ANY WARRANTIES OR REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE 
# FROM CLAIMS OF INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY 
# AND FITNESS FOR A PARTICULAR PURPOSE.
# 
# File   : make.bootloop
# Company: Xilinx
#
# Summary:
#    The bootloop program keeps the processor when it comes out of reset 
# on powerup. This bootloop program is useful when the user program is
# in external memory and the user is in the debugging phase. On powerup, 
# external memory is not initialized and usually the debugger has to 
# download the program to external memory. Until then, the bootloop 
# program keeps the processor busy and prevents it from executing 
# instructions from uninitialized memory (which can cause unknown 
# behavior from which the debugger cannot stop the processor).
#
# $Id: make.bootloop,v 1.1.10.7 2010/08/11 21:36:12 tshui Exp $
#
#####################################################################


ARCH = mb
BOOTLOOP = mb_bootloop
BOOTLOOP_LE = mb_bootloop_le

all : $(BOOTLOOP).elf $(BOOTLOOP_LE).elf

$(BOOTLOOP).elf : $(BOOTLOOP).s $(BOOTLOOP).linkerscript
	$(ARCH)-as $(BOOTLOOP).s -o $(BOOTLOOP).o
	$(ARCH)-ld -EB -T $(BOOTLOOP).linkerscript $(BOOTLOOP).o -o $(BOOTLOOP).elf
	$(ARCH)-size $(BOOTLOOP).elf

$(BOOTLOOP_LE).elf : $(BOOTLOOP).s $(BOOTLOOP).linkerscript
	$(ARCH)-as -mlittle-endian $(BOOTLOOP).s -o $(BOOTLOOP_LE).o
	$(ARCH)-ld -EL -T $(BOOTLOOP).linkerscript $(BOOTLOOP_LE).o -o $(BOOTLOOP_LE).elf
	$(ARCH)-size $(BOOTLOOP_LE).elf

clean :
	rm $(BOOTLOOP).o $(BOOTLOOP).elf $(BOOTLOOP_LE).o $(BOOTLOOP_LE).elf
